program ::= (statement | newline)* EOF


statement ::= declaration_stmnt | import_stmt | print_stmnt | input_stmnt | return_stmnt | if_stmnt | while_stmnt | do_stmnt | for_stmnt | break_stmnt | continue_stmnt | pass_stmnt | expression_stmnt

declaration_stmnt ::= variable_declaration | function_declaration

variable_declaration ::= var_type identifier ( '=' assignment_expr )? ( ',' identifier ( '=' assignment_expr )? )* newline

var_type ::= 'char' | 'int' | 'float' | 'str' | 'list'

function_declaration ::= 'def' identifier '(' (identifier ( ',' identifier )* )? ')' block

identifier ::= alphabetic ( alphabetic | digit | '_' )*

block ::= newline INDENT statement+ DEDENT

import_stmt ::= 'import' assignment_expr ( ',' assignment_expr )* newline  /* assignment must result in string */

print_stmnt ::= 'print' '-raw'? ( assignment_expr ( ',' assignment_expr )* )?  newline

input_stmnt ::= 'input' string? identifier ( ',' string? identifier )* newline

return_stmnt ::= 'return' expression? newline

if_stmnt ::= 'if' expression block ( 'else' block )?

while_stmnt ::= 'while' expression block

do_stmnt ::= 'do' block 'while' expression newline

for_stmnt ::= 'for' IDENTIFIER 'in' sequence

break_stmnt ::= 'break' newline

continue_stmnt ::= 'continue' newline

pass_stmnt ::= 'pass' newline

expression_stmnt ::= expression newline

/* builtin functions */

type_function ::= 'type' '(' assignment_expr ')'

/* expressions */

expression ::= assignment_expr ( ',' expression )*

assignment_expr ::= logical_or_expr ( ( '=' | '+=' | '-=' | '*=' | '\=' | '%=' ) assignment_expr )*

logical_or_expr ::= logical_and_expr ( 'or' logical_or_expr )*

logical_and_expr ::= equality_expr ( 'and' logical_and_expr )*

equality_expr ::= relational_expr ( ( '==' | '!=' | '<>' | 'in' ) equality_expr )*

relational_expr ::= additive_expr ( ( '<'| '>' | '<=' | '>=' ) relational_expr )*

additive_expr ::= mult_expr ( ( '+' | '-' ) additive_expr )*

mult_expr ::= unary_expr ( ( '*' | '/' | '%' ) mult_expr )*

unary_expr ::= ( '+' | '-' | '!' )? primary_expr

primary_expr ::= function_call | variable | constant | '(' expression ')'

function_call ::= identifier '(' (assignment_expr ( ',' assignment_expr )* )? ')'

/* variables and constants */

variable ::= ( numeric_variable | sequence_variable ) ( '.' method )?

numeric_variable ::= char_variable | integer_variable | float_variable

sequence_variable ::= ( string_variable | list_variable ) ( subscript? )

sequence ::= ( string_variable | list_variable ) ( '[' slice ']' )?

method ::= list_insert | list_append | list_remove | sequence_len

sequence_len ::= 'len'

list_insert ::= 'insert' '(' index ','  logical_or_expr ')'

list_append ::= 'append' '(' logical_or_expr ')'

list_remove ::= 'remove' '(' index ')'

char_variable ::= 'identifier of variable of type char'

integer_variable ::= 'identifier of variable of type int'

float_variable ::= 'identifier of variable of type float'

string_variable ::= 'identifier of variable of type str'

list_variable ::= 'identifier of variable of type list'

subscript ::= '[' ( index | slice ) ']'

index ::= logical_or_expr

slice ::= logical_or_expr? ':' logical_or_expr?

constant ::= numeric_const | character_const | string_const | list_const

numeric_const ::= number

character_const ::= "'" character "'"

string_const ::= string

list_const ::= '[' ( assignment_expr ( ',' assignment_expr )* )? ']'

/* low level definitions */

string ::= '"' character* '"'

character ::= 'any character except single quote' | escape

alphabetic ::= [a-zA-Z]

escape ::= '\' [bnfrtv\'"0]

number ::= integer | float

integer ::= digit+

float ::= digit+ '.' ( digit+ )? ( ('e' | 'E') ( '+' | '-' )? digit+ )?

digit ::= [0-9]
